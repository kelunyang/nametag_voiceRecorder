<!DOCTYPE html>
<html lang="zh-Hant">
	<head>
		<title>留言機器人：{{ title }}</title>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
        {{> head}}
        <style type="text/css">
            h2 {
                font-size: 16px;
            }
            div#mainEvent {
                overflow: hidden;
            }
            div#mainEvent > div.eventHolder {
                position: relative;
                background-color: #000;
            }
            div#mainEvent > div > p.eventName {
                font-size: 80px;
                font-weight: bold;
                text-align: center;
                line-height: 80px;
                margin-top: 10px;
                margin-bottom: 10px;
            }
            div#mainEvent > div#upcommingEvent > p.locationBar > span.highLight {
                background-color: maroon;
                padding-left: 5px;
                padding-right: 5px;
            }
            div#mainEvent > div#currentEvent > p.locationBar > span.highLight {
                background-color: darkgreen;
                padding-left: 5px;
                padding-right: 5px;
            }
            header#calArea {
                display: block;
                max-height: 300px;
                min-height: 200px;
            }
            p.locationBar {
                text-align: right;
                font-size: 18px;
            }
            i.place {
                padding:3px;
            }
            footer#commArea {
                display: flex;
                justify-content: center;
                min-height: 50px;
                flex-direction: column;
            }
            footer#commArea > div#buttons {
                display: flex;
                justify-content: center;
                flex-direction: row;
            }
            footer#commArea > div#bulletin {
                display: flex;
                justify-content: center;
                flex-direction: column;
            }
            footer#commArea > div#loading {
                display: flex;
                justify-content: center;
                flex-direction: row;
            }
            footer#commArea > div#loading > i {
                padding: 2px;
            }
            footer#commArea > div#loading > span {
                font-family: "source-han-sans-traditional";
                font-weight: normal;
            }
            ul.otherList {
                margin: 3px 0px;
                font-size: 16px;
            }
            ul.otherList > li {
                display: flex;
                flex-direction: row;
                justify-content: space-between;
                margin: 1px 0px;
            }
            ul.otherList > li > span.othername {
                flex: 1;
                padding-left:5px;
            }
            footer#commArea > ul.otherList > li > span.othertime {
                color: #FF9;
                padding-left: 20px;
            }
            footer#commArea > ul.otherList > li > span.othertime:before {
                content: "[";
            }
            footer#commArea > ul.otherList > li > span.othertime:after {
                content: "]";
            }
            header#calArea > ul.otherList > li > span.otherics {
                padding: 2px;
            }
            section#reportArea > div > p#question {
                border-bottom: 2px solid #FFF;
                padding: 3px;
                font-size: 20px;
                font-weight: normal;
                font-family: "source-han-sans-traditional";
            }
            section#reportArea > div > p#question > em {
                color: #FF9;
                padding: 2px;
                font-style: normal;
                transition: all 0.2s;
                transition-delay: 300ms;
                cursor: default;
            }
            section#reportArea > div > p#question > em:before {
                content: "["
            }
            section#reportArea > div > p#question > em:after {
                content: "]"
            }
            section#reportArea > div > p#question > em:hover {
                color: #FC3;
            }
            section#reportArea > div > p#question > em:active {
                background-color: #FF9;
                color: #000;
                padding: 2px;
                font-style: normal;
            }
            section#reportArea > div > ul#selections > li > em {
                padding: 2px;
                font-style: normal;
            }
            section#reportArea > div > ul#selections {
                margin: 3px 0px;
                font-family: "source-han-sans-traditional";
                font-weight: normal;
                font-size: 25px;
                padding: 0px;
                overflow-y: scroll;
                max-height: 190px;
            }
            section#reportArea > div > p.buttonArea {
                border-top: 2px solid #FFF;
                padding: 1px;
                margin: 1px;
                text-align: right;
            }
            section#reportArea > div .areaElement {
                z-index: 3;
                position: relative;
            }
            section#reportArea > div > ul#selections > li {
                list-style: none;
                padding: 2px;
                padding-left: 10px;
                border: 1px solid #FFF;
                margin: 3px;
                transition: all 0.2s;
                transition-delay: 300ms;
                opacity: 0.2;
                cursor: default;
            }
            section#reportArea > div > ul#selections > li:hover {
                opacity: 1;
            }
            section#reportArea > div > ul#selections > li:active {
                background-color: #FFF;
                color: #000;
                transition: none;
            }
            section#recordingArea > div > p.supportMsg {
                text-align: center;
                font-family: "source-han-sans-traditional";
                font-weight: normal;
            }
            section#recordingArea > div > p.supportMsg > i {
                padding: 0px 3px;
            }
            section#recordingArea > div > p.supportMsg > textarea#textMessage {
                width: 60%;
                height: 60px;
                font-size: 14px;
            }
            section#recordingArea > div > p.supportMsg > a {
                color: #FFF;
                transition: all 0.2s;
                transition-delay: 300ms;
            }
            section#recordingArea > div > p.supportMsg > a:hover {
                color: #FFF;
                text-decoration: none;
            }
            section#recordingArea > div > p.supportMsg > a:active {
                color: #000;
                background-color: #FFF;
            }
        </style>
    </head>
    <body>
        <header id="calArea">
            <h1><i class="fa fa-calendar" aria-hidden="true"></i><span id="mainICS">&nbsp;</span></h1>
            <div id="mainEvent">
                <div id="currentEvent" class="eventHolder">
                    <p class="eventName"></p>
                    <p class="locationBar"><span class="highLight">目前的事件</span><i class="fa fa-clock-o place" aria-hidden="true"></i><span class="eventTime">&nbsp;</span><i class="fa fa-map-marker place" aria-hidden="true"></i><span class="eventLocation">&nbsp;</span></p>
                </div>
                <div id="upcommingEvent" class="eventHolder">
                    <p class="eventName"></p>
                    <p class="locationBar"><span class="highLight">下一個事件</span><i class="fa fa-clock-o place" aria-hidden="true"></i><span class="eventTime">&nbsp;</span><i class="fa fa-map-marker place" aria-hidden="true"></i><span class="eventLocation">&nbsp;</span></p>
                </div>
            </div>
            <h2><i class="fa fa-exclamation-circle" aria-hidden="true"></i><span>其他行程</span></h2>
            <ul class="otherList"></li>
            </ul>
        </header>
        <footer id="commArea">
            <div id="bulletin">
                <h2><i class="fa fa-comments-o" aria-hidden="true"></i><span>最近留言</span></h2>
                <ul class="otherList"></ul>
            </div>
            <div id="buttons">
                <button id="surveyBtn"><i class="fa fa-user-secret" aria-hidden="true"></i>小老師回報</button>
                <button id="recordingBtn"><i class="fa fa-microphone" aria-hidden="true"></i>留言給老師</button>
            </div>
            <div id="loading">
                <i class="fa fa-refresh fa-spin fa-fw" id="loadingicon"></i>
                <i class="fa fa-info-circle" aria-hidden="true" id="infoicon"></i>
                <span>下載訊息列表</span>
            </div>
        </footer>
        <section id="reportArea">
            <div>
                <p class="tip">請按一下黃底的問題區塊，再選擇你的答案後送出</p>
                <i class="fa fa-question-circle" aria-hidden="true"></i>
                <p id="question" class="areaElement"></p>
                <ul id="selections" class="areaElement"></ul>
                <p class="buttonArea areaElement">
                    <button id="sendReport"><i class="fa fa-paper-plane" aria-hidden="true"></i>送出</button>
                    <button id="closeReport"><i class="fa fa-times-circle" aria-hidden="true"></i>關閉</button>
                </p>
            </div>
        </section>
        <section id="recordingArea">
            <div>
                <i class="fa fa-microphone" aria-hidden="true"></i>
                <p class="tip">&nbsp;</p>
                <p class="buttonArea areaElement">
                    <button id="enableRecording" class="startrecBtn"><i class="fa fa-microphone" aria-hidden="true"></i><span>錄製留言</span></button>
                    <!-- <button id="playRecording"><i class="fa fa-play" aria-hidden="true"></i><span>播放留言</span></button> -->
                    <button id="sendText"><i class="fa fa-commenting-o" aria-hidden="true"></i>文字留言</button>
                    <button id="sendRecording"><i class="fa fa-paper-plane" aria-hidden="true"></i>送出</button>
                    <button id="closeRecording"><i class="fa fa-times-circle" aria-hidden="true"></i>關閉</button>
                </p>
                <p id="textMsgArea" class="supportMsg">
                    <textarea id="textMessage" placeholder="請輸入文字訊息"></textarea><br/>
                    <i class="fa fa-envelope" aria-hidden="true"></i>也可以Email至：<a href="mailto:kelunyang@outlook.com">kelunyang@outlook.com</a>
                </p>
                <p class="supportMsg"><i class="fa fa-firefox" aria-hidden="true"></i><i class="fa fa-chrome" aria-hidden="true"></i>請使用最新版的Firefox或Chrome瀏覽器，否則可能無法錄音</p>
                <div id="waveform"></div>
            </div>
        </section>
        <section id="countdownArea">
            <div>
                <i class="fa fa-clock-o" aria-hidden="true"></i>
                <p class="tip">四分鐘沒有動作，將自動回到名牌頁，回到本頁請按倒數計時按鈕</p>
                <p class="buttonArea areaElement">
                    <button id="enableRefresh" class="stoprecBtn"><i class="fa fa-stop-circle" aria-hidden="true"></i><span>00:30</span></button>
                </p>
            </div>
        </section>
        <section id="errorArea">
            <div>
                <i class="fa fa-exclamation-triangle" aria-hidden="true"></i>
                <p id="errorMsg">&nbsp;</p>
                <p class="buttonArea areaElement">
                    <button id="closeError"><i class="fa fa-times-circle" aria-hidden="true"></i>關閉</button>
                </p>
            </div>
        </section>

        {{> footer}}

        <script>
            function insertList(item, color, time) {
                var li = $("<li></li>");
                var ics = $("<span></span>").addClass("otherics").text(item.calname);
                ics.css("backgroundColor", color);
                var name = $("<span></span>").addClass("othername").text(item.summary);
                var clockicon = $("<i></i>").addClass("fa fa-clock-o place");
                var clock = $("<span></span>").addClass("othertime").text(time);
                var locationicon = $("<i></i>").addClass("fa fa-map-marker place");
                var location = $("<span></span>").addClass("otherlocation").text(item.location);
                li.append(ics);
                li.append(name);
                li.append(clockicon);
                li.append(clock);
                li.append(locationicon);
                li.append(location);
                $("header#calArea > ul.otherList").append(li);
            }
            function mainSwipe(direction) {
                if(direction) {
                    $("header#calArea > div#mainEvent > div#upcommingEvent").animate({
                        left: 0
                    });
                    $("header#calArea > div#mainEvent > div#currentEvent").animate({
                        left: $("header#calArea > div#mainEvent").outerWidth(true) * -1
                    }, function() {
                        alert.setMsg("向右滑動回復目前的事件", 1);
                        alert.show();
                        $("header#calArea > h1 > span#mainICS").text($("header#calArea > div#mainEvent > div#upcommingEvent").data("calname"));
                    });
                } else {
                    $("header#calArea > div#mainEvent > div#upcommingEvent").animate({
                        left: $("header#calArea > div#mainEvent").outerWidth(true)
                    });
                    $("header#calArea > div#mainEvent > div#currentEvent").animate({
                        left: 0
                    }, function() {
                        alert.setMsg("向左滑動檢視下一個事件", 1);
                        alert.show();
                        $("header#calArea > h1 > span#mainICS").text($("header#calArea > div#mainEvent > div#currentEvent").data("calname"));
                    });
                }
            }
            function update() {
                socket.emit("getCal");
                alert.setMsg("下載行程列表...", 0);
                alert.show();
            }
            class point {
                constructor() {
                    this.x;
                    this.y;
                }
                reset() {
                    this.x = undefined;
                    this.y = undefined;
                }
            }
            var pendingCommand = null;
            var recordingready = false;
            var calrefreshtime = 60 * 30;
            var maxrecordtime = 60 * 5;
            var refreshtimer = new timer(240, "頁面倒數計時");
            var recordtimer = new timer(0, "錄音計時器");
            var refreshArray = new Array();
            var recording = null;
            var refreshback = new timer(1, "頁面重整");
            var recorder = undefined;
            /*var wavesurfer = WaveSurfer.create({
                container: '#waveform',
                waveColor: '#0F3',
                progressColor: '#CF6'
            });*
            var recorder = Object.create(WaveSurfer.Microphone);
            recorder.init({
                wavesurfer: wavesurfer
            });*/
            var recordingfile = null;
            var recstatus = false;
            var isPlaying = false;
            var touchpoint = {
                start: new point(),
                end: new point(),
                checkmove: function() {
                    var val = this.start.x - this.end.x > 0 ? true : false;
                    this.reset();
                    return val;
                },
                reset: function() {
                    this.start.x = undefined;
                    this.start.y = undefined;
                    this.end.x = undefined;
                    this.end.y = undefined;
                }
            }
            touchpoint.reset();
            socket = io.connect();
            fileupload = io.connect("/fileUpload");
            socket.on("errorMsg", function(data) {
                if(data.msg == "re-Download") {
                    socket.emit("getCal", {
                        parameter: 0
                    });
                    alert.setMsg("下載行程列表...", 0);
                    alert.show();
                    refreshtimer.reset();
                } else {
                    $("section#errorArea > div > p#errorMsg").text(JSON.parse(data.msg));
                    $("section#errorArea").show();
                    refreshtimer.reset();
                }
            });
            socket.on("messageSent", function(data) {
                refreshtimer.reset();
                $("section#recordingArea").hide();
                $("section#reportArea").hide();
                $("section#reportArea > div > p.tip").hide();
                pendingCommand = function() {
                    socket.emit("getmessageService");
                    alert.setMsg("下載留言列表...", 0);
                    alert.show();
                }
                socket.emit("userCheck");
            });
            socket.on("disconnect", (data) => {
                alert.setMsg("網路連線中斷，重新連線中...", 1);
                alert.show();
                socket = io.connect();
            });
            socket.on('connect', function () {
                alert.hide();
            });
            socket.on("sendCal", async (data) => {
                if(data.primary != undefined) {
                    $("header#calArea > h1 > span#mainICS").text(data.primary.calname);
                    $("header#calArea > div#mainEvent > div#currentEvent").data("calname", data.primary.calname);
                    $("header#calArea > div#mainEvent > div#currentEvent > p.eventName").text(data.primary.summary);
                    if(data.primary.summary == "休息中") {
                        $("header#calArea > div#mainEvent > div#currentEvent > p.locationBar").hide();
                    } else {
                        if(refreshArray.filter(function(item) {
                            return item.name == data.primary.summary + data.primary.endtime;
                        }).length == 0) {
                            refreshArray.forEach(function(item) {
                                if(item.name == "行事曆定時排程") {
                                    item.clearInterval();
                                }
                            });
                            refreshArray.push(new timer(data.primary.endtime - moment().unix(),"主行事曆事件："+data.primary.summary+data.primary.endtime));
                            refreshArray[refreshArray.length - 1].startTimer(function() {
                                update();
                            });
                        }
                    }
                    $("header#calArea > div#mainEvent > div#currentEvent > p.locationBar > span.eventTime").text(moment.unix(data.primary.starttime).format("HH:mm")+"-"+moment.unix(data.primary.endtime).format("HH:mm"));
                    $("header#calArea > div#mainEvent > div#currentEvent > p.locationBar > span.eventLocation").text(data.primary.location);
                }
                if(data.upcomming != undefined) {
                    $("header#calArea > div#mainEvent > div#upcommingEvent").data("calname", data.upcomming.calname);
                    $("header#calArea > div#mainEvent > div#upcommingEvent > p.eventName").text(data.upcomming.summary);
                    if(data.upcomming.summary == "休息中") {
                        $("header#calArea > div#mainEvent > div#upcommingEvent > p.locationBar").hide();
                    }
                    $("header#calArea > div#mainEvent > div#upcommingEvent > p.locationBar > span.eventTime").text(moment.unix(data.upcomming.starttime).format("HH:mm")+"-"+moment.unix(data.upcomming.endtime).format("HH:mm"));
                    $("header#calArea > div#mainEvent > div#upcommingEvent > p.locationBar > span.eventLocation").text(data.upcomming.location);
                    $("header#calArea > div#mainEvent > div#upcommingEvent").data("disable", false);
                    if(refreshArray.filter(function(item) {
                        return item.name == data.upcomming.summary + data.upcomming.starttime;
                    }).length == 0) {
                        refreshArray.forEach(function(item) {
                            if(item.name == "行事曆定時排程") {
                                item.clearInterval();
                            }
                        });
                        refreshArray.push(new timer(data.upcomming.starttime - moment().unix(), "主行事曆事件："+data.upcomming.summary + data.upcomming.starttime));
                        refreshArray[refreshArray.length - 1].startTimer(function() {
                            update();
                        });
                    }
                    if(refreshArray.filter(function(item) {
                        return item.name == data.upcomming.summary + data.upcomming.endtime;
                    }).length == 0) {
                        refreshArray.forEach(function(item) {
                            if(item.name == "行事曆定時排程") {
                                item.clearInterval();
                            }
                        });
                        refreshArray.push(new timer(data.upcomming.endtime - moment().unix(),"主行事曆事件："+data.upcomming.summary + data.upcomming.endtime));
                        refreshArray[refreshArray.length - 1].startTimer(function() {
                            update();
                        });
                    }
                }
                var intervalCheck = false;
                var nexttime = refreshArray.filter(function(item) {
                    return item.name.indexOf("主行事曆事件") > -1;
                })
                nexttime.sort(function(a,b) {
                    return b.original - a.original;
                });
                if(nexttime.length > 0) {
                    intervalCheck = nexttime[0].original > 3 * 60 * 60 ? true : false;
                }
                if(intervalCheck) {
                    $("header#calArea > div#mainEvent > div#upcommingEvent").data("disable", true);
                    refreshArray.push(new timer(30*60 ,"行事曆定時排程"));
                    refreshArray[refreshArray.length - 1].startInterval(function() {
                        update();
                    });
                }
                if($("header#calArea > div#mainEvent > div#upcommingEvent").innerHeight() > $("header#calArea > div#mainEvent > div#currentEvent").innerHeight()) {
                    $("header#calArea > div#mainEvent > div#currentEvent").css("height", $("header#calArea > div#mainEvent > div#upcommingEvent").innerHeight() + "px");
                } else {
                    $("header#calArea > div#mainEvent > div#upcommingEvent").css("height", $("header#calArea > div#mainEvent > div#currentEvent").innerHeight() + "px");
                }
                $("header#calArea > div#mainEvent > div#upcommingEvent").css("top", ($("header#calArea > div#mainEvent > div#currentEvent").outerHeight(true) * -1) - 10 +"px");    //line hight 10，所以要往上拉10
                $("header#calArea > div#mainEvent > div#upcommingEvent").css("left", $("header#calArea > div#mainEvent").outerWidth(true) + "px");
                if(data.secondary.length + data.allDay.length > 0) {
                    var i = 0;
                    var colorArr = randomColor({luminosity: 'dark', format: 'rgba', count:13, alpha: 1});
                    var colorMap = new Object();
                    $("header#calArea > ul.otherList").empty();
                    data.secondary.forEach(function(item) {
                        colorMap[item.calname] = colorArr[i];
                        insertList(item, colorMap[item.calname], moment.unix(item.starttime).format("HH:mm")+"-"+moment.unix(item.endtime).format("HH:mm"));
                        i++;
                    });
                    data.allDay.forEach(function(item) {
                        if(!colorMap.hasOwnProperty(item.calname)) {
                            colorMap[item.calname] = colorArr[i];
                            i++;
                        }
                        insertList(item, colorMap[item.calname], "全天");
                    });
                } else {
                    $("header#calArea > ul.otherList").hide();
                    $("header#calArea > h2").hide();
                }
                alert.hide();
                if(data.upcomming != undefined) {
                    await Promise.delay(1000).then(function() {
                        Promise.resolve(mainSwipe(true));
                    }).delay(7000).then(function() {
                        Promise.resolve(mainSwipe(false));
                    });
                }
                pendingCommand = function() {
                    socket.emit("getmessageService");
                }
                socket.emit("userCheck");
            });
            socket.on("messageList", function(data) {
                $("footer#commArea > div#bulletin > ul.otherList").empty();
                if(data.length > 0) {
                    $("footer#commArea > div#bulletin > ul.otherList").show();
                    $("footer#commArea > div#bulletin > h2").show();
                    data.forEach(function(item) {
                        var li = $("<li></li>");
                        var name = $("<span></span>").addClass("othername").text(item.message);
                        var timestamp = $("<span></span>").addClass("othertime").text(moment.unix(item.timestamp).format("YYYY/MM/DD HH:mm"));
                        li.append(name);
                        li.append(timestamp);
                        $("footer#commArea > div#bulletin > ul.otherList").append(li);
                    });
                } else {
                    $("footer#commArea > div#bulletin > ul.otherList").hide();
                    $("footer#commArea > div#bulletin > h2").empty();
                }
                alert.hide();
                if(!refreshback.start) {
                    refreshback.startInterval(function() {
                        refreshtimer.clock--;
                        if(refreshtimer.clock < 30) {
                            $("section").hide();
                            $("section#countdownArea").show();
                            $("button#enableRefresh > span").text(moment.utc(moment.duration(refreshtimer.clock, "seconds").asMilliseconds()).format("mm:ss"));
                        }
                        if(refreshtimer.clock == 0) {
                            location.href = "/";
                        }
                    });
                }
            });
            ss(fileupload).on("recordingUploaded", function(data) {
                $("section#recordingArea > div > p.tip").text("留言發送成功！");
            });
            socket.on("userChecked", function(data) {
                if(data) {
                    pendingCommand();
                } else {
                    location.reload();
                }
            });
            socket.on("questionList", function(data) {
                refreshtimer.reset();
                $("section#reportArea").show();
                $("section#reportArea > div > p#question").hide();
                $("section#reportArea > div > p.buttonArea > button#sendReport").hide();
                $("section#reportArea > div > p.tip").text("請選擇你要回復的問題");
                $("section#reportArea > div > ul#selections").empty();
                data.forEach(function(item) {
                    var li = $("<li></li>").html(marked.inlineLexer((item.question),[]));
                    li.data("answers", item.answers);
                    li.data("question", item.question);
                    li.data("qid",item.id);
                    $("section#reportArea > div > ul#selections").append(li);
                });
                $("section#reportArea > div > ul#selections > li").off();
                $("section#reportArea > div > ul#selections > li").on("click", function() {
                    refreshtimer.reset();
                    var answers = $(this).data("answers");
                    var id= $(this).data("qid");
                    $("section#reportArea > div > p.tip").show();
                    $("section#reportArea > div > p#question").empty();
                    $("section#reportArea > div > p#question").data("qid", id);
                    $("section#reportArea > div > p#question").html(marked.inlineLexer(($(this).data("question")),[]));
                    $("section#reportArea > div > p#question").show();
                    $("section#reportArea > div > p.buttonArea > button#sendReport").show();
                    $("section#reportArea > div > p.tip").text("請按一下黃底的問題區塊，再選擇你的答案後送出");
                    $("section#reportArea > div > ul#selections").empty();
                    var i = 0;
                    answers.forEach(function(item) {
                        $($("section#reportArea > div > p#question > em")[i]).data("answers", item);
                        i++;
                    });
                    $("section#reportArea > div > p#question > em").on("click", function() {
                        var oriobj = this;
                        refreshtimer.reset();
                        $("section#reportArea > div > ul#selections").empty();
                        $("section#reportArea > div > p#question > em").data("answers").forEach(function(item) {
                            var li = $("<li></li>").text(item);
                            li.data("obj", oriobj);
                            $("section#reportArea > div > ul#selections").append(li);
                        });
                        $("section#reportArea > div > ul#selections > li").on("click", function() {
                            $($(this).data("obj")).text($(this).text());
                        });
                    });
                    $("section#reportArea > div > p#question > em").first().click();
                });
                alert.hide();
            });
            $().ready(function() {
                $("section").hide();
                $("p#textMsgArea").hide();
                alert.hide();
                refreshArray.push(new timer(1, "更新資料"));
                refreshArray[refreshArray.length-1].startTimer(function() {
                    update();
                });
                $("body").on("keypress", function() {
                    refreshtimer.reset();
                });
                $("div#currentEvent").on("touchstart", function(event) {
                    if(!$("header#calArea > div#mainEvent > div#upcommingEvent").data("disable")) {
                        touchpoint.start.x = event.touches[0].clientX;
                        touchpoint.start.y = event.touches[0].clientY;
                    }
                });
                $("div#currentEvent").on("touchmove", async (event) => {
                    if(!$("header#calArea > div#mainEvent > div#upcommingEvent").data("disable")) {
                        touchpoint.end.x = event.touches[0].clientX;
                        touchpoint.end.y = event.touches[0].clientY;
                        if(touchpoint.checkmove()) {
                            await Promise.resolve(mainSwipe(true)).delay(10000).then(async () => {
                                await Promise.resolve(mainSwipe(false))
                            });
                        }
                    }
                });
                $("div#currentEvent").on("mousedown", function(event) {
                    if(!$("header#calArea > div#mainEvent > div#upcommingEvent").data("disable")) {
                        touchpoint.start.x = event.clientX;
                        touchpoint.start.y = event.clientY;
                    }
                });
                $("div#currentEvent").on("mouseup", async (event) => {
                    if(!$("header#calArea > div#mainEvent > div#upcommingEvent").data("disable")) {
                        touchpoint.end.x = event.clientX;
                        touchpoint.end.y = event.clientY;
                        if(touchpoint.checkmove()) {
                            await Promise.resolve(mainSwipe(true)).delay(10000).then(async () => {
                                await Promise.resolve(mainSwipe(false))
                            });
                        }
                    }
                });
                $("div#upcommingEvent").on("touchstart", function(event) {
                    if(!$("header#calArea > div#mainEvent > div#upcommingEvent").data("disable")) {
                        touchpoint.start.x = event.touches[0].clientX;
                        touchpoint.start.y = event.touches[0].clientY;
                    }
                });
                $("div#upcommingEvent").on("touchmove", async (event) => {
                    if(!$("header#calArea > div#mainEvent > div#upcommingEvent").data("disable")) {
                        touchpoint.end.x = event.touches[0].clientX;
                        touchpoint.end.y = event.touches[0].clientY;
                        if(!touchpoint.checkmove()) {
                            await Promise.resolve(mainSwipe(false));
                        }
                    }
                });
                $("div#upcommingEvent").on("mousedown", function(event) {
                    if(!$("header#calArea > div#mainEvent > div#upcommingEvent").data("disable")) {
                        touchpoint.start.x = event.clientX;
                        touchpoint.start.y = event.clientY;
                    }
                });
                $("div#upcommingEvent").on("mouseup", async (event) => {
                    if(!$("header#calArea > div#mainEvent > div#upcommingEvent").data("disable")) {
                        touchpoint.end.x = event.clientX;
                        touchpoint.end.y = event.clientY;
                        if(!touchpoint.checkmove()) {
                            await Promise.resolve(mainSwipe(false));
                        }
                    }
                });
                $("button#closeError").on("click", function() {
                    $("section#errorArea").hide();
                });
                $("button#enableRefresh").on("click", function() {
                    refreshtimer.reset();
                    $("section#countdownArea").hide();
                });
                /*$("button#playRecording").on("click", function() {
                    if(recordingready) {
                        if(isPlaying) {
                            $("button#playRecording > span").text("播放留言");
                            $("button#playRecording > i").addClass("fa-play");
                            $("button#playRecording > i").removeClass("fa-pause");
                            wavesurfer.playPause();
                            isPlaying = false;
                        } else {
                            isPlaying = true;
                            $("button#playRecording > i").removeClass("fa-play");
                            $("button#playRecording > i").addClass("fa-pause");
                            $("button#playRecording > span").text("暫停播放");
                            wavesurfer.play();
                        }
                    }
                });*/
                $("button#recordingBtn").on("click", function() {
                    refreshtimer.reset();
                    $("section#recordingArea > div > p.tip").text("請選擇你要的留言方式");
                    $("button#sendRecording").hide();
                    $("button#sendText").show();
                    $("button#enableRecording").show();
                    $("p#textMsgArea").hide();
                    $("textarea#textMessage").val("");
                    //$("button#playRecording").hide();
                    $("section#recordingArea").show();
                });
                $("button#enableRecording").on("click", function() {
                    $("section#recordingArea").data("type", 0);
                    $("section#recordingArea > div > p.tip").text("請對準麥克風，按下留言按鈕，開始留言");
                    if(recstatus) {
                        recorder.stop();
                    } else {
                        //wavesurfer.empty();
                        recordingfile = null;
                        var iOS = ['iPad', 'iPhone', 'iPod'].indexOf(navigator.platform) > -1;
                        if(!iOS) {
                            if(!navigator.hasOwnProperty("mediaDevices")) {
                                navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {
                                    recstatus = true;
                                    recording = setInterval(function() {
                                        recordtimer.clock++;
                                        refreshtimer.reset();
                                        $("button#enableRecording > span").text(moment.utc(moment.duration(recordtimer.clock, "seconds").asMilliseconds()).format("mm:ss"));
                                        if(recordtimer.clock > 4 * 60) {
                                            $("section#recordingArea > div > p.tip").text("剩下"+moment.utc(moment.duration(maxrecordtime - recordtimer.clock, "seconds").asMilliseconds()).format("mm:ss")+"之後自動結束錄音");
                                        }
                                        if(recordtimer.clock == maxrecordtime) {
                                            if(recorder.status == "recording") {
                                                $("button#enableRecording").click();
                                            }
                                        }
                                    },1000);
                                    refreshtimer.reset();
                                    //$("button#playRecording").hide();
                                    $("button#sendRecording").hide();
                                    $("button#closeRecording").hide();
                                    $("button#enableRecording").removeClass("startrecBtn");
                                    $("button#enableRecording").addClass("stoprecBtn");
                                    $("button#enableRecording > i").removeClass("fa-microphone");
                                    $("button#enableRecording > i").addClass("fa-stop-circle");
                                    $("section#recordingArea > div > p.tip").text("停止錄音，請按一下紅色按鈕");
                                    const chunks = [];
                                    recorder = new MediaRecorder(stream);
                                    recorder.ondataavailable = e => {
                                        refreshtimer.reset();
                                        chunks.push(e.data);
                                        if (recorder.state == 'inactive') {
                                            recordingfile = MediaRecorder.isTypeSupported('audio/webm;codecs=opus') ? new Blob(chunks, { type: 'audio/webm' }) : new Blob(chunks, { type: 'audio/ogg' });
                                        }
                                    };
                                    recorder.onstop = msg => {
                                        clearInterval(recording);
                                        recordingready = true;
                                        recordtimer.reset();
                                        recording = null;
                                        recstatus = false;
                                        refreshtimer.reset();
                                        $("button#sendRecording").show();
                                        //$("button#playRecording").show();
                                        $("button#closeRecording").show();
                                        $("button#enableRecording").removeClass("stoprecBtn");
                                        $("button#enableRecording").addClass("startrecBtn");
                                        $("button#enableRecording > i").removeClass("fa-stop-circle");
                                        $("button#enableRecording > i").addClass("fa-microphone");
                                        $("button#enableRecording > span").text("開始留言");
                                        $("section#recordingArea > div > p.tip").text("錄音完成，確定上傳請按傳送");
                                        /*wavesurfer.empty();
                                        wavesurfer.loadBlob(recordingfile);
                                        wavesurfer.un("ready");
                                        wavesurfer.on("ready", function() {
                                            refreshtimer.reset();
                                            $("button#sendRecording").show();
                                            $("button#playRecording").show();
                                            $("button#closeRecording").show();
                                            $("button#enableRecording").removeClass("stoprecBtn");
                                            $("button#enableRecording").addClass("startrecBtn");
                                            $("button#enableRecording > i").removeClass("fa-stop-circle");
                                            $("button#enableRecording > i").addClass("fa-microphone");
                                            $("button#enableRecording > span").text("開始留言");
                                            $("section#recordingArea > div > p.tip").text("錄音完成！，你這次錄了"+moment.utc(moment.duration(wavesurfer.getDuration(), "seconds").asMilliseconds()).format("mm 分 ss 秒")+"，確定上傳請按傳送");
                                        });
                                        wavesurfer.on("finish", function() {
                                            $("button#playRecording > span").text("播放留言");
                                            $("button#playRecording > i").addClass("fa-play");
                                            $("button#playRecording > i").removeClass("fa-pause");
                                            isPlaying = false;
                                        });
                                        wavesurfer.on("error", function(error) {
                                            refreshtimer.reset();
                                            $("button#closeRecording").show();
                                            $("button#enableRecording").removeClass("stoprecBtn");
                                            $("button#enableRecording").addClass("startrecBtn");
                                            $("button#enableRecording > i").removeClass("fa-stop-circle");
                                            $("button#enableRecording > i").addClass("fa-microphone");
                                            $("button#enableRecording > span").text("開始留言");
                                            $("section#recordingArea > div > p.tip").text("錄音發生錯誤！");
                                            $("section#errorArea > div > p#errorMsg").text("錄音轉換發生錯誤，錯誤："+error);
                                            $("section#errorArea").show();
                                        });*/
                                    }
                                    recorder.start();
                                    setTimeout(() => {
                                        recorder.stop();
                                    }, maxrecordtime*1000);
                                    /*recorder.on('deviceError', function(code) {
                                        refreshtimer.reset();
                                        $("section#errorArea > div > p#errorMsg").text("無法啟動音訊設備，請檢查麥克風是否安裝完成，並且授權使用，錯誤："+error);
                                        $("section#errorArea").show();
                                    });
                                    recorder.on('deviceReady', function(stream) {
                                        setTimeout(() => {
                                            recorder.stop();
                                        }, maxrecordtime*1000);
                                    });*/
                                }).catch(error => {
                                    refreshtimer.reset();
                                    $("section#errorArea > div > p#errorMsg").text("無法啟動音訊設備，請檢查麥克風是否安裝完成，並且授權使用，錯誤："+error);
                                    $("section#errorArea").show();
                                });
                            } else {
                                $("section#errorArea > div > p#errorMsg").text("你的瀏覽器不支援錄音功能，請使用Chrome/Firefox最新版本開啟本頁面");
                                $("section#errorArea").show();                            
                            }
                        } else {
                            $("section#errorArea > div > p#errorMsg").text("iOS系統不支援錄音功能，請採用文字留言");
                            $("section#errorArea").show();                                                        
                        }
                    }
                });
                $("button#closeRecording").on("click", function() {
                    if(recstatus) {
                        $("button#enableRecording").click();
                    }
                    $("section#recordingArea").hide();
                    //wavesurfer.empty();
                    recordingfile = null;
                });
                $("button#sendRecording").on("click", function() {
                    pendingCommand = function() {
                        if($("section#recordingArea").data("type") == 0) {
                            var stream = ss.createStream();
                            var blobStream = ss.createBlobReadStream(recordingfile);
                            var size = 0;
                            $("section#recordingArea > div > p.tip").text("上傳中...");
                            var progress = $("<progress></progress>").prop("max", 100);
                            $("section#recordingArea > div > p.tip").append(progress);
                            blobStream.on("data", function(chunk) {
                                size += chunk.length;
                                progress.prop("value",Math.floor(size / recordingfile.size * 100));
                                if(size == chunk.length) {
                                    $("section#recordingArea > div > p.tip").text("檔案發送完畢，等待伺服器回應...");
                                }
                            });
                            ss(fileupload).emit("recordingUpload", stream, {filetype: MediaRecorder.isTypeSupported('audio/webm;codecs=opus') ? "webm" : "ogg"});
                            blobStream.pipe(stream);
                        } else {
                            $("section#recordingArea > div > p.tip").text("發送訊息中...");
                            socket.emit("sendmsgService", {
                                message: $("textarea#textMessage").val(),
                                qid: null
                            });
                        }
                    }
                    socket.emit("userCheck");
                });
                $("button#sendText").on("click", function() {
                    $("section#recordingArea > div > p.tip").text("請輸入你的留言");
                    $("section#recordingArea").data("type", 1);
                    $("p#textMsgArea").show();
                    $("button#enableRecording").hide();
                    $("button#sendText").hide();
                    $("button#sendRecording").show();
                });
                $("button#surveyBtn").on("click", function() {
                    pendingCommand = function() {
                        socket.emit("getquestionService");
                    }
                    socket.emit("userCheck");
                });
                $("button#sendReport").on("click", function() {
                    pendingCommand = function() {
                        socket.emit("sendmsgService", {
                            message: $("p#question").text(),
                            qid: $("p#question").data("qid")
                        });
                        alert.setMsg("送出留言", 0);
                        alert.show();
                        refreshtimer.reset();
                    }
                    socket.emit("userCheck");
                });
                $("button#closeReport").on("click", function() {
                    $("section#reportArea").hide();
                });
            });
        </script>
    </body>
</html>